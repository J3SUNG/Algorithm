import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine());

		int ans = 0;
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		int[][] map = new int[n + 1][n + 1];

		for (int i = 1; i <= m; ++i) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			map[a][b] = 1;
		}

		for (int i = 1; i <= n; ++i) {
			for (int j = 1; j <= n; ++j) {
				if (i == j) {
					continue;
				}
				for (int k = 1; k <= n; ++k) {
					if (i == k || j == k) {
						continue;
					}
					if (map[j][i] == 1 && map[i][k] == 1) {
						map[j][k] = 1;
					}
				}
			}
		}

		for (int i = 1; i <= n; ++i) {
			int cnt = 0;
			for (int j = 1; j <= n; ++j) {
				if (i == j) {
					continue;
				}
				if (map[i][j] == 1) {
					++cnt;
				}
			}
			for (int j = 1; j <= n; ++j) {
				if (i == j) {
					continue;
				}
				if (map[j][i] == 1) {
					++cnt;
				}
			}
			if (cnt == n - 1) {
				++ans;
			}
		}

		bw.write(ans + "\n");
		bw.close();
	}
}
