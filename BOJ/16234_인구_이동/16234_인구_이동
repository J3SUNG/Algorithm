import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int n;
	static int l;
	static int r;
	static int[][] map;
	static boolean[][] visit;
	static boolean chk;
	static Queue<Pair> q = new LinkedList<Pair>();
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		l = Integer.parseInt(st.nextToken());
		r = Integer.parseInt(st.nextToken());
		map = new int[n][n];
		for(int i=0; i<n; ++i) {
			st = new StringTokenizer(br.readLine());
			for(int j=0; j<n; ++j) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		int cnt = 0;
		while(cnt <= 2000) {
			chk = false;
			visit = new boolean[n][n];
			for(int i=0; i<n; ++i) {
				for(int j=0; j<n; ++j) {
					if(!visit[i][j]) {
						int num = 0;
						num = DFS(i, j);
						int size = q.size();
						while(!q.isEmpty()) {
							Pair p = q.poll();
							map[p.y][p.x] = num / size;  
						}
					}
				}
			}
			if(!chk) {
				bw.write(cnt + "");
				bw.close();
				return;
			}
			++cnt;
		}
		bw.write("-1");
		bw.close();
	}
	public static int DFS(int y, int x) {
		visit[y][x] = true;
		int num = map[y][x];
		int[] dy = {0, 1, 0, -1};
		int[] dx = {1, 0, -1, 0};
		q.add(new Pair(y, x));
		for(int i=0; i<4; ++i) {
			int nextY = y+dy[i];
			int nextX = x+dx[i];
			if(nextY < 0 || nextX < 0 || nextY >= n || nextX >= n || visit[nextY][nextX]) {
				continue;
			}
			if(Math.abs(map[y][x] - map[nextY][nextX]) >= l && Math.abs(map[y][x] - map[nextY][nextX]) <= r) {
				num += DFS(nextY, nextX);
				chk = true;
			}
		}
		return num;
	}
	static class Pair{
		int y;
		int x;
		public Pair(int y, int x){
			this.y = y;
			this.x = x;
		}
	}
}
